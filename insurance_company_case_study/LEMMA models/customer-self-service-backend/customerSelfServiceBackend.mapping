import microservices from "customerSelfServiceBackend.services" as selfServiceBackendServices
import technology from "../technology/javaWithSpring.technology" as java
import technology from "../technology/map.technology" as map
import technology from "../technology/hystrix.technology" as hystrix
import technology from "../technology/lakesideMutual.technology" as lakesideMutual
import technology from "../technology/eureka.technology" as eureka

@technology(java)
type selfServiceBackendServices::customerSelfServiceBackend::customerSelfService.Address {
    aspects { java::_aspects.Table("addresses"); }

    id { aspects { java::_aspects.GeneratedValue; } }
}

@technology(java)
type selfServiceBackendServices::customerSelfServiceBackend::customerSelfService.CustomerDto {
    aspects { java::_aspects.ResourceSupport; }

    customerProfile { aspects { java::_aspects.JsonUnwrapped; } }
}

@technology(java)
type selfServiceBackendServices::customerSelfServiceBackend::customerSelfService.CustomersDto {
    aspects { java::_aspects.ResourceSupport; }
}

@technology(java)
type selfServiceBackendServices::customerSelfServiceBackend::customerSelfService.RequestStatus {
    aspects {
        java::_aspects.EnumerationMethod(
            "public boolean canTransitionTo(RequestStatus newStatus)"
        );
    }
}

@technology(map)
type selfServiceBackendServices::customerSelfServiceBackend::customerSelfService.CitiesResponseDto {
    aspects { map::_aspects.AtomicParameter; }
}

@technology(java)
type selfServiceBackendServices::customerSelfServiceBackend::customerSelfService.CustomerId {
    op random { aspects { java::_aspects.static; } }
}

@technology(java)
type selfServiceBackendServices::customerSelfServiceBackend::customerSelfService.UserLoginEntity {
    aspects { java::_aspects.Table("user_logins"); }

    id { aspects { java::_aspects.GeneratedValue; } }

    customerId {
        aspects {
            java::_aspects.Embedded;
            java::_aspects.AttributeOverrideColumn(name="id", column="customerId");
        }
    }
}

@technology(java)
type selfServiceBackendServices::customerSelfServiceBackend::customerSelfService.UserSecurityDetails {
    aspects { java::_aspects.UserDetails; }

    accountNonExpired { aspects { java::_aspects.JsonIgnore; } }
    accountNonLocked { aspects { java::_aspects.JsonIgnore; } }
    authorities : java::_types.GrantedAuthorities;
    credentialsNonExpired { aspects { java::_aspects.JsonIgnore; } }
    enabled { aspects { java::_aspects.JsonIgnore; } }
    password { aspects { java::_aspects.JsonIgnore; } }
}

@technology(java)
type selfServiceBackendServices::customerSelfServiceBackend
    ::customerSelfService.UserDetailsServiceImpl {
    userRepository { aspects { java::_aspects.Autowired; } }

    op loadUserByUsername { return type { aspects { java::_aspects.UserDetails; } } }
}

@technology(java)
type selfServiceBackendServices::customerSelfServiceBackend::customerSelfService.AddressDto {
    op fromDomainObject { aspects { java::_aspects.static; } }
}

@technology(java)
type selfServiceBackendServices::customerSelfServiceBackend
    ::customerSelfService.CustomerProfileDto {
    currentAddress { aspects { java::_aspects.JsonUnwrapped; } }
}

@technology(java, typedef=true)
@technology(lakesideMutual)
type selfServiceBackendServices::customerSelfServiceBackend
    ::customerSelfService.CustomerProfileUpdateRequestDto {
    birthday { aspects { java::_aspects.JsonFormat("yyyy-MM-dd"); } }
    email { aspects { java::_aspects.Email; } }
    phoneNumber { aspects { lakesideMutual::_aspects.PhoneNumber; } }
}

@technology(java, typedef=true)
@technology(lakesideMutual)
type selfServiceBackendServices::customerSelfServiceBackend
    ::customerSelfService.CustomerRegistrationRequestDto {
    birthday {
        aspects {
            java::_aspects.JsonFormat("yyyy-MM-dd");
            java::_aspects.Past;
        }
    }
    phoneNumber { aspects { lakesideMutual::_aspects.PhoneNumber; } }
}

@technology(java)
type selfServiceBackendServices::customerSelfServiceBackend::customerSelfService.SignupRequestDto {
    email { aspects { java::_aspects.Email; } }
}

@technology(java)
type selfServiceBackendServices::customerSelfServiceBackend
    ::customerSelfService.CustomerInfoEntity {
    aspects { java::_aspects.Table("customerinfos"); }

    id { aspects { java::_aspects.GeneratedValue; } }

    customerId {
        aspects {
            java::_aspects.Embedded;
            java::_aspects.AttributeOverrideColumn(name="id", column="customerId");
        }
    }
}

@technology(java)
type selfServiceBackendServices::customerSelfServiceBackend
    ::customerSelfService.InsuranceOptionsEntity {
    aspects { java::_aspects.Table("insuranceoptions"); }

    id { aspects { java::_aspects.GeneratedValue; } }

    insuranceType {
        aspects {
            java::_aspects.Embedded;
            java::_aspects.AttributeOverrideColumn(name="id", column="customerId");
        }
    }

    deductible {
        aspects {
            java::_aspects.Embedded;
            java::_aspects.AttributeOverrideColumn(name="amount", column="deductibleAmount");
            java::_aspects.AttributeOverrideColumn(name="currency", column="deductibleCurrency");
        }
    }
}

@technology(java)
type selfServiceBackendServices::customerSelfServiceBackend
    ::customerSelfService.InsuranceQuoteEntity {
    aspects { java::_aspects.Table("insurancequotes"); }

    id { aspects { java::_aspects.GeneratedValue; } }

    insurancePremium {
        aspects {
            java::_aspects.Embedded;
            java::_aspects.AttributeOverrideColumn(name="amount",
                column="insurancePremiumAmount");
            java::_aspects.AttributeOverrideColumn(name="currency",
                column="insurancePremiumCurrency");
        }
    }

    policyLimit {
        aspects {
            java::_aspects.Embedded;
            java::_aspects.AttributeOverrideColumn(name="amount", column="policyLimitAmount");
            java::_aspects.AttributeOverrideColumn(name="currency", column="policyLimitCurrency");
        }
    }
}

@technology(java)
type selfServiceBackendServices::customerSelfServiceBackend
    ::customerSelfService.InsuranceQuoteRequestAggregateRoot {
    aspects { java::_aspects.Table("insurancequoterequests"); }

    id { aspects { java::_aspects.GeneratedValue; } }

    statusHistory { aspects { java::_aspects.OneToMany(fetch="EAGER"); } }

    customerInfo { aspects { java::_aspects.OneToMany; } }

    insuranceOptions { aspects { java::_aspects.OneToMany; } }

    insuranceQuote { aspects { java::_aspects.OneToMany; } }
}

@technology(java)
type selfServiceBackendServices::customerSelfServiceBackend::customerSelfService.MoneyAmount {
    amount : java::_types.BigDecimal;
    currency : java::_types.Currency;
}

@technology(java)
type selfServiceBackendServices::customerSelfServiceBackend
    ::customerSelfService.RequestStatusChange {
    aspects { java::_aspects.Table("requeststatuschanges"); }

    id { aspects { java::_aspects.GeneratedValue; } }

    status { aspects { java::_aspects.Enumerated("STRING"); } }
}

@technology(java)
@technology(hystrix)
type selfServiceBackendServices::customerSelfServiceBackend
    ::customerSelfService.CustomerCoreRemoteProxy {
    customerCoreBaseURL { aspects { java::_aspects.Value("${customercore.baseURL}"); } }

    op getCustomer { aspects { hystrix::_aspects.HystrixCommand("getDummyCustomer"); } }

    op changeAddress { return type : java::_types.ResponseEntity; }

    op getCitiesForPostalCode { return type : java::_types.ResponseEntity; }
}

@technology(java)
@technology(hystrix)
type selfServiceBackendServices::customerSelfServiceBackend
    ::customerSelfService.PolicyManagementMessageProducer {
    insuranceQuoteRequestEventQueue {
        aspects { java::_aspects.Value("${insuranceQuoteRequestEvent.queueName}"); }
    }

    customerDecisionEventQueue {
        aspects { java::_aspects.Value("${customerDecisionEvent.queueName}"); }
    }
}

@technology(java)
type selfServiceBackendServices::customerSelfServiceBackend::customerSelfService.CustomerInfoDto {
    contactAddress { aspects { java::_aspects.Valid; } }

    billingAddress { aspects { java::_aspects.Valid; } }

    op fromDomainObject { aspects { java::_aspects.static; } }
}

@technology(java)
type selfServiceBackendServices::customerSelfServiceBackend
    ::customerSelfService.InsuranceOptionsDto {
    startDate {
        aspects {
            java::_aspects.JsonFormat("yyyy-MM-dd");
            java::_aspects.Valid;
        }
    }

    deductible { aspects { java::_aspects.Valid; } }

    op fromDomainObject { aspects { java::_aspects.static; } }
}

@technology(java)
type selfServiceBackendServices::customerSelfServiceBackend::customerSelfService.InsuranceQuoteDto {
    expirationDate { aspects { java::_aspects.Valid; } }

    insurancePremium { aspects { java::_aspects.Valid; } }

    policyLimit { aspects { java::_aspects.Valid; } }

    op fromDomainObject { aspects { java::_aspects.static; } }
}

@technology(java)
type selfServiceBackendServices::customerSelfServiceBackend
    ::customerSelfService.InsuranceQuoteRequestDto {
    ^date { aspects { java::_aspects.Valid; } }

    statusHistory { aspects { java::_aspects.Valid; } }

    customerInfo { aspects { java::_aspects.Valid; } }

    insuranceOptions { aspects { java::_aspects.Valid; } }

    insuranceQuote { aspects { java::_aspects.Valid; } }

    op fromDomainObject { aspects { java::_aspects.static; } }
}

@technology(java)
type selfServiceBackendServices::customerSelfServiceBackend
    ::customerSelfService.InsuranceQuoteResponseDto {
    expirationDate { aspects { java::_aspects.Valid; } }

    insurancePremium { aspects { java::_aspects.Valid; } }

    policyLimit { aspects { java::_aspects.Valid; } }
}

@technology(java)
type selfServiceBackendServices::customerSelfServiceBackend::customerSelfService.MoneyAmountDto {
    amount : java::_types.BigDecimal {
        aspects {
            java::_aspects.DecimalMax(value = "1000000000000", inclusive = false);
            java::_aspects.DecimalMin("0");
        }
    }

    op fromDomainObject { aspects { java::_aspects.static; } }
}

@technology(java)
type selfServiceBackendServices::customerSelfServiceBackend
    ::customerSelfService.RequestStatusChangeDto {
    ^date { aspects { java::_aspects.Valid; } }

    op fromDomainObject { aspects { java::_aspects.static; } }
}

@technology(java)
@technology(map)
selfServiceBackendServices::com.lakesidemutual.customerselfservice.CustomerSelfServiceBackend {
    aspects {
        java::_aspects.CustomProperty(
            name="insuranceQuoteRequestEvent.queueName",
            value="insurance-quote-request-event-queue"
        );
        java::_aspects.CustomProperty(
            name="customerDecisionEvent.queueName",
            value="customer-decision-event-queue"
        );
        java::_aspects.CustomProperty(
            name="insuranceQuoteResponseEvent.queueName",
            value="insurance-quote-response-event-queue"
        );
        java::_aspects.CustomProperty(
            name="insuranceQuoteExpiredEvent.queueName",
            value="insurance-quote-expired-event-queue"
        );
        java::_aspects.CustomProperty(
            name="policyCreatedEvent.queueName",
            value="policy-created-event-queue"
        );
        java::_aspects.ActiveMqConfiguration(
            user = "queueuser",
            password = "secret"
        );
        java::_aspects.CustomProperty(
            name="policymanagement.tcpBrokerBindAddress",
            value="tcp://localhost:61616"
        );

        java::_aspects.ApplicationName("customer-self-service-backend");
        java::_aspects.JacksonConfiguration(INDENT_OUTPUT=true,
            defaultPropertyInclusion="NON_NULL");
        java::_aspects.DatasourceConfiguration(
            url="jdbc:h2:file:./customerselfservice",
            username="sa",
            password="sa",
            driverClassName="org.h2.Driver"
        );
        java::_aspects.Port(8080);
        java::_aspects.HibernateConfiguration("create-drop");
        java::_aspects.CustomProperty(name="customercore.baseURL", value="http://customer-core");
        java::_aspects.Management(property="endpoints.web.exposure.include", value="*");
        java::_aspects.Management(property="info.git.mode", value="full");
        java::_aspects.AllowBeanDefinitionOverriding;
        java::_aspects.AdminClientUrl("http://localhost:9000");
    }

    interface authenticationController {
        endpoints { java::_protocols.rest: "/auth"; }
    }

    interface cityStaticDataHolder {
        endpoints { java::_protocols.rest: "/cities"; }

        aspects { map::_aspects.StaticDataHolder; }
    }

    interface customerInformationHolder {
        endpoints { java::_protocols.rest: "/customers"; }

        aspects {
            map::_aspects.InformationHolderResource;
            map::_aspects.MasterDataHolder;
        }
    }

    interface userInformationHolder {
        endpoints { java::_protocols.rest: "/user"; }

        aspects {
            map::_aspects.InformationHolderResource;
            map::_aspects.MasterDataHolder;
        }
    }

    interface insuranceQuoteRequestInformationHolder {
        endpoints { java::_protocols.rest: "/insurance-quote-requests"; }

        aspects {
            map::_aspects.InformationHolderResource;
            map::_aspects.MasterDataHolder;
        }
    }

    operation authenticationController.authenticationRequest {
        aspects { java::_aspects.PostMapping; }

        parameters {
            complex authenticationRequest { aspects { java::_aspects.RequestBody; } }
            complex authenticationResponse : java::_types.ResponseEntity;
            primitive authenticationException : java::_types.AuthenticationException;
        }
    }

    operation authenticationController.signupUser {
        endpoints { java::_protocols.rest: "/signup"; }

        aspects { java::_aspects.PostMapping; }

        parameters {
            complex registration {
                aspects { java::_aspects.Valid; java::_aspects.RequestBody; }
            }
            complex userResponse : java::_types.ResponseEntity;
            primitive userAlreadyExists { aspects { java::_aspects.ResponseStatus("CONFLICT"); } }
        }
    }

    operation cityStaticDataHolder.getCitiesForPostalCode {
        endpoints { java::_protocols.rest: "/{postalCode}"; }

        aspects { java::_aspects.GetMapping; }

        parameters {
            primitive postcalCode { aspects { java::_aspects.PathVariable; } }
            complex result : java::_types.ResponseEntity;
            primitive customerCoreNotAvailable {
                aspects { java::_aspects.ResponseStatus("BAD_GATEWAY"); }
            }
        }
    }

    operation customerInformationHolder.changeAddress {
        endpoints { java::_protocols.rest: "/{customerId}/address"; }

        aspects {
            java::_aspects.PreAuthorize("isAuthenticated()");
            java::_aspects.PutMapping;
        }

        parameters {
            complex customerId { aspects { java::_aspects.PathVariable; } }
            complex requestDto { aspects { java::_aspects.RequestBody; java::_aspects.Valid; } }
            complex result : java::_types.ResponseEntity;
            primitive customerCoreNotAvailable {
                aspects { java::_aspects.ResponseStatus("BAD_GATEWAY"); }
            }
        }
    }

    operation customerInformationHolder.getCustomer {
        endpoints { java::_protocols.rest: "/{customerId}"; }

        aspects {
            java::_aspects.GetMapping;
            java::_aspects.PreAuthorize("isAuthenticated()");
        }

        parameters {
            complex customerId { aspects { java::_aspects.PathVariable; } }
            complex result : java::_types.ResponseEntity;
            primitive authentication : java::_types.Authentication;
            primitive customerNotFound { aspects { java::_aspects.ResponseStatus("NOT_FOUND"); } }
            primitive customerCoreNotAvailable {
                aspects { java::_aspects.ResponseStatus("BAD_GATEWAY"); }
            }
        }
    }

    operation customerInformationHolder.registerCustomer {
        aspects {
            java::_aspects.PostMapping;
            java::_aspects.PreAuthorize("isAuthenticated()");
        }

        parameters {
            complex requestDto { aspects { java::_aspects.Valid; java::_aspects.RequestBody; } }
            complex result : java::_types.ResponseEntity;
            primitive authentication : java::_types.Authentication;
            primitive customerCoreNotAvailable {
                aspects { java::_aspects.ResponseStatus("BAD_GATEWAY"); }
            }
        }
    }

    operation customerInformationHolder.getInsuranceQuoteRequests {
        endpoints { java::_protocols.rest: "/{customerId}/insurance-quote-requests"; }

        aspects {
            java::_aspects.GetMapping;
            java::_aspects.PreAuthorize("isAuthenticated()");
        }

        parameters {
            complex customerId { aspects { java::_aspects.PathVariable; } }
            complex result : java::_types.ResponseEntities;
        }
    }

    operation userInformationHolder.getCurrentUser {
        aspects {
            java::_aspects.GetMapping;
            java::_aspects.PreAuthorize("isAuthenticated()");
        }

        parameters {
            primitive authentitaction : java::_types.Authentication;
            complex response : java::_types.ResponseEntity;
        }
    }

    operation insuranceQuoteExpiredMessageConsumer.receiveInsuranceQuoteExpiredEvent {
        endpoints { java::_protocols.amqp: "insurance-quote-expired-event-queue"; }

        parameters { complex message : java::_types.Message; }
    }

    operation insuranceQuoteRequestInformationHolder.getInsuranceQuoteRequests {
        aspects { java::_aspects.GetMapping; }

        parameters { complex quoteRequestDtos : java::_types.ResponseEntities; }
    }

    operation insuranceQuoteRequestInformationHolder.getInsuranceQuoteRequest {
        endpoints { java::_protocols.rest: "/{insuranceQuoteRequestId}"; }

        aspects {
            java::_aspects.GetMapping;
            java::_aspects.PreAuthorize("isAuthenticated()");
        }

        parameters {
            primitive authentication : java::_types.Authentication;
            primitive insuranceQuoteRequestId { aspects { java::_aspects.PathVariable; } }
            complex quoteRequestDto : java::_types.ResponseEntity;
            primitive insuranceQuoteRequestNotFound {
                aspects {
                    java::_aspects.ResponseStatus("NOT_FOUND");
                }
            }
            primitive unauthorized : java::_types.ResponseEntityErrorCode {
                aspects {
                    java::_aspects.ResponseStatus("UNAUTHORIZED");
                }
            }
        }
    }

    operation insuranceQuoteRequestInformationHolder.createInsuranceQuoteRequest {
        aspects {
            java::_aspects.PostMapping;
            java::_aspects.PreAuthorize("isAuthenticated()");
        }

        parameters {
            primitive authentication : java::_types.Authentication;
            complex requestDto {
                aspects {
                    java::_aspects.RequestBody;
                    java::_aspects.Valid;
                }
            }
            complex quoteRequestDto : java::_types.ResponseEntity;
            primitive unauthorized : java::_types.ResponseEntityErrorCode {
                aspects {
                    java::_aspects.ResponseStatus("UNAUTHORIZED");
                }
            }
        }
    }

    operation insuranceQuoteRequestInformationHolder.respondToInsuranceQuote {
        endpoints {
            java::_protocols.rest: "/{id}";
        }

        aspects {
            java::_aspects.PatchMapping;
            java::_aspects.PreAuthorize("isAuthenticated()");
        }

        parameters {
            primitive id { aspects { java::_aspects.PathVariable; } }

            complex insuranceQuoteResponseDto {
                aspects {
                    java::_aspects.RequestBody;
                    java::_aspects.Valid;
                }
            }

            complex quoteRequestDto : java::_types.ResponseEntity;

            primitive insuranceQuoteRequestNotFound {
                aspects {
                    java::_aspects.ResponseStatus("NOT_FOUND");
                }
            }

            primitive unauthorized : java::_types.ResponseEntityErrorCode {
                aspects {
                    java::_aspects.ResponseStatus("UNAUTHORIZED");
                }
            }
        }
    }

    operation insuranceQuoteResponseMessageConsumer.receiveInsuranceQuoteResponse {
        endpoints { java::_protocols.amqp: "insurance-quote-response-event-queue"; }

        parameters { complex message : java::_types.Message; }
    }

    operation policyCreatedMessageConsumer.receivePolicyCreatedEvent {
        endpoints { java::_protocols.amqp: "policy-created-event-queue"; }

        parameters { complex message : java::_types.Message; }
    }
}