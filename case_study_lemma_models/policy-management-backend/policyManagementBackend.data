context policyManagement {
    structure Address<valueObject> {
        hide long id<identifier>,
        immutable string streetAddress,
        immutable string postalCode,
        immutable string city
    }

    structure CustomerDecisionEvent<valueObject, domainEvent> {
        date ^date,
        long ^insuranceQuoteRequestId,
        boolean ^quoteAccepted
    }

    structure CustomerInfoEntity<entity> {
        long id<identifier>,
        immutable CustomerId customerId,
        immutable string firstname,
        immutable string lastname,
        immutable Address contactAddress,
        immutable Address billingAddress
    }

    structure InsuranceOptionsEntity<entity> {
        long id<identifier>,
        immutable date startDate,
        immutable InsuranceType insuranceType,
        immutable MoneyAmount deductible
    }

    structure InsuranceQuoteEntity<entity> {
        long id<identifier>,
        immutable date expirationDate,
        immutable MoneyAmount insurancePremium,
        immutable MoneyAmount policyLimit
    }

    structure InsuranceQuoteExpiredEvent<valueObject, domainEvent> {
        date ^date,
        long insuranceQuoteRequestId
    }

    structure InsuranceQuoteRequestAggregateRoot<aggregate, entity> {
        immutable long id<identifier>,
        immutable date ^date,
        immutable RequestStatusChanges statusHistory<part>,
        immutable CustomerInfoEntity customerInfo<part>,
        immutable InsuranceOptionsEntity insuranceOptions<part>,
        immutable InsuranceQuoteEntity insuranceQuote,
        immutable string policyId,
        function RequestStatus getStatus(),
        hide procedure changeStatusTo(RequestStatus newStatus, date ^date),
        procedure acceptRequest(InsuranceQuoteEntity insuranceQuote, date ^date),
        procedure rejectRequest(date ^date),
        procedure acceptQuote(date ^date),
        procedure rejectQuote(date ^date),
        procedure markQuoteAsExpired(date ^date),
        procedure finalizeQuote(string policyId, date ^date),
        function RequestStatusChange popStatus(),
        function boolean checkQuoteExpirationDate(date ^date)
    }

    structure InsuranceQuoteRequestEvent<valueObject, domainEvent> {
        date ^date,
        InsuranceQuoteRequestDto insuranceQuoteRequestDto
    }

    structure InsuranceQuoteResponseEvent<valueObject, domainEvent> {
        date ^date,
        long insuranceQuoteRequestId,
        boolean requestAccepted,
        date expirationDate,
        MoneyAmountDto insurancePremium,
        MoneyAmountDto policyLimit
    }

    structure InsuranceType<valueObject> {
        immutable string name
    }

    structure PolicyCreatedEvent<valueObject, domainEvent> {
        date ^date,
        long insuranceQuoteRequestId,
        string policyId
    }

    enum RequestStatus<valueObject> {
        REQUEST_SUBMITTED,
        REQUEST_REJECTED,
        QUOTE_RECEIVED,
        QUOTE_ACCEPTED,
        QUOTE_REJECTED,
        QUOTE_EXPIRED,
        POLICY_CREATED
    }

    structure RequestStatusChange<valueObject> {
        long id,
        immutable date ^date,
        immutable RequestStatus status
    }

    list RequestStatusChanges { RequestStatusChange c }

    structure AddressDto<valueObject> {
        string streetAddress,
        string postalCode,
        string city,
        function AddressDto fromDomainObject(Address address),
        function Address toDomainObject
    }

    structure DeletePolicyEvent<valueObject, domainEvent> {
        string kind,
        string originator,
        date ^date,
        string policyId
    }

    list AddressDtos { AddressDto d }

    structure CustomerId<valueObject> {
        string id
    }

    list CustomerIds { CustomerId i }

    structure CustomerDto<valueObject> {
        string customerId,
        CustomerProfileDto customerProfile
    }

    structure CustomerIdDto<valueObject> {
        string id
    }

    structure CustomerProfileDto<valueObject> {
        string firstname,
        string lastname,
        date birthday,
        AddressDto currentAddress,
        string email,
        string phoneNumber,
        AddressDtos moveHistory
    }

    structure CustomersDto<valueObject> {
        CustomerDtos customers
    }

    structure PaginatedCustomerResponseDto<valueObject> {
        string filter,
        int limit,
        int offset,
        int size,
        CustomerDtos customers
    }

    structure InsuringAgreementEntity<entity> {
        long id<identifier>,
        immutable InsuringAgreementItems agreementItems
    }

    structure InsuringAgreementItem<valueObject> {
        long id<identifier>,
        immutable string title,
        immutable string description
    }

    list InsuringAgreementItems { InsuringAgreementItem i }

    structure MoneyAmount<valueObject> {
        immutable double amount,
        immutable string currency
    }

    structure PolicyAggregateRoot<entity, aggregate> {
        immutable PolicyId id<identifier, part>,
        immutable CustomerId customerId<part>,
        immutable string FIELD_CREATION_DATE = "creationDate",
        immutable date creationDate,
        PolicyPeriod policyPeriod<part>,
        PolicyType policyType<part>,
        MoneyAmount deductible<part>,
        MoneyAmount policyLimit<part>,
        MoneyAmount insurancePremium<part>,
        InsuringAgreementEntity insuringAgreement
    }

    list PolicyAggregateRoots { PolicyAggregateRoot p }

    structure PolicyId<valueObject> {
        string id,
        function PolicyId random
    }

    structure PolicyPeriod<valueObject> {
        immutable date startDate,
        immutable date endDate
    }

    structure PolicyType<valueObject> {
        immutable string name
    }

    structure UpdatePolicyEvent<valueObject,domainEvent> {
        string kind,
        string originator,
        date ^date,
        CustomerDto customer,
        PolicyDto policy
    }

    structure CustomerCoreRemoteProxy<infrastructureService> {
        hide string customerCoreBaseURL,
        function CustomerDto getCustomer(CustomerId customerId),
        function PaginatedCustomerResponseDto getCustomers(string filter, int limit, int offset),
        function CustomerDtos getCustomersById(CustomerIds customerId)
    }

    list CustomerDtos { CustomerDto d }

    structure CustomerSelfServiceMessageProducer<infrastructureService> {
        hide string quoteResponseQueue,
        hide string quoteExpiredQueue,
        hide string policyCreatedQueue,
        procedure sendInsuranceQuoteResponseEvent(InsuranceQuoteResponseEvent event),
        procedure sendInsuranceQuoteExpiredEvent(InsuranceQuoteExpiredEvent event),
        procedure sendPolicyCreatedEvent(PolicyCreatedEvent event)
    }

    structure InsuranceQuoteRequestRepository<repository> {
        InsuranceQuoteRequestAggregateRoot quoteRequest,
        long id,
        function InsuranceQuoteRequestAggregateRoots findByCustomerInfo_CustomerId(
            CustomerId customerId
        ),
        function InsuranceQuoteRequestAggregateRoots findAllByOrderByDateDesc
    }

    list InsuranceQuoteRequestAggregateRoots { InsuranceQuoteRequestAggregateRoot a }

    structure CreatePolicyRequestDto<valueObject> {
        immutable string customerId,
        immutable string policyPeriod,
        immutable string policyType<neverEmpty>,
        immutable MoneyAmountDto deductible,
        immutable MoneyAmountDto policyLimit,
        immutable MoneyAmountDto insurancePremium,
        immutable InsuringAgreementDto insuringAgreement
    }

    structure InsuringAgreementDto<valueObject> {
        immutable InsuringAgreementItemDtos agreementItems<neverEmpty>,
        function InsuringAgreementDto fromDomainObject(InsuringAgreementEntity insuringAgreement),
        function InsuringAgreementEntity toDomainObject
    }

    structure InsuringAgreementItemDto<valueObject> {
        immutable string title<neverEmpty>,
        immutable string description<neverEmpty>,
        function InsuringAgreementItemDto fromDomainObject(InsuringAgreementItem item),
        function InsuringAgreementItem toDomainObject
    }

    list InsuringAgreementItemDtos { InsuringAgreementItemDto d }

    structure MoneyAmountDto<valueObject> {
        double amount<neverEmpty>,
        string currency<neverEmpty>,
        function MoneyAmountDto fromDomainObject(MoneyAmount moneyAmount),
        function MoneyAmount toDomainObject
    }

    structure PolicyDto<valueObject> {
        string policyId,
        unspecified customer,
        date creationDate,
        PolicyPeriodDto policyPeriod,
        string policyType,
        MoneyAmountDto deductible,
        MoneyAmountDto policyLimit,
        MoneyAmountDto insurancePremium,
        InsuringAgreementDto insuringAgreement,
        Strings expandable,
        function PolicyDto fromDomainObject(PolicyAggregateRoot policy)
    }

    list Strings { string }

    structure CustomerInfoDto<valueObject> {
        string customerId,
        string firstname,
        string lastname,
        AddressDto contactAddress,
        AddressDto billingAddress,
        function CustomerInfoDto fromDomainObject(CustomerInfoEntity customerInfo),
        function CustomerInfoEntity toDomainObject
    }

    structure InsuranceOptionsDto<valueObject> {
        date startDate,
        string insuranceType,
        MoneyAmountDto deductible,
        function InsuranceOptionsDto fromDomainObject(InsuranceOptionsEntity insuranceOptions),
        function InsuranceOptionsEntity toDomainObject
    }

    structure InsuranceQuoteDto<valueObject> {
        date expirationDate<neverEmpty>,
        MoneyAmountDto insurancePremium<neverEmpty>,
        MoneyAmountDto policyLimit<neverEmpty>,
        function InsuranceQuoteDto fromDomainObject(InsuranceQuoteEntity insuranceQuote)
    }

    structure InsuranceQuoteRequestDto<valueObject> {
        long id,
        date ^date,
        RequestStatusChangeDtos statusHistory,
        CustomerInfoDto customerInfo<neverEmpty>,
        InsuranceOptionsDto insuranceOptions<neverEmpty>,
        InsuranceQuoteDto insuranceQuote,
        string policyId,
        function InsuranceQuoteRequestDto fromDomainObject(
            InsuranceQuoteRequestAggregateRoot insuranceQuoteRequest
        )
    }

    list InsuranceQuoteRequestDtos { InsuranceQuoteRequestDto d }

    structure InsuranceQuoteResponseDto<valueObject> {
        string status<neverEmpty>,
        date expirationDate,
        MoneyAmountDto insurancePremium,
        MoneyAmountDto policyLimit
    }

    structure RequestStatusChangeDto<valueObject> {
        date ^date,
        string status<neverEmpty>,
        function RequestStatusChangeDto fromDomainObject(RequestStatusChange requestStatusChange)
    }

    list RequestStatusChangeDtos { RequestStatusChangeDto r }

    list PolicyDtos { PolicyDto d }

    structure PolicyPeriodDto<valueObject> {
        date startDate<neverEmpty>,
        date endDate<neverEmpty>,
        function PolicyPeriodDto fromDomainObject(PolicyPeriod policyPeriod),
        PolicyPeriod toDomainObject
    }

    structure PaginatedPolicyResponseDto<valueObject> {
        immutable int limit,
        immutable int offset,
        immutable int size,
        immutable PolicyDtos policies
    }

    structure RiskFactorRequestDto<valueObject> {
        date birthday,
        string postalCode
    }

    structure RiskFactorResponseDto<valueObject> {
        immutable int riskFactor
    }

    structure PolicyRepository<repository> {
        PolicyAggregateRoot policy,
        PolicyId policyId,
        function PolicyId nextId,
        function PolicyAggregateRoots findAllByCustomerIdOrderByCreationDateDesc(
            CustomerId customerId
        )
    }

    structure RiskManagementMessageProducer<infrastructureService> {
        string queueName,
        procedure emitEvent(unspecified event)
    }
}