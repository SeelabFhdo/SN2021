import datatypes from "customerManagement.data" as CustomerManagementAPIData
import technology from "OpenApi.technology" as OpenApi

@technology(OpenApi)
public functional microservice com.lakesidemutual.customermanagement.CustomerManagementAPI {
    interface customerInformationHolder {
        ---
        **Type** GET Operation for path /customers
        **Summary** Get all customers.
        **Description**
        @required filter [INSERT PARAMETER DESC HERE]
        @required limit [INSERT PARAMETER DESC HERE]
        @required offset [INSERT PARAMETER DESC HERE]
        @required returnValue [INSERT PARAMETER DESC HERE]
        ---
        @endpoints(OpenApi::_protocols.rest:"/customers";)
        @OpenApi::_aspects.GetMapping
        getCustomersUsingGET( sync in filter : string,  sync in limit : int,  sync in offset : int,  sync out returnValue : CustomerManagementAPIData::v100.CustomerManagementAPI.PaginatedCustomerResponseDto);
        ---
        **Type** GET Operation for path /customers/{customerId}
        **Summary** Get customer with a given customer id.
        **Description**
        @required returnValue [INSERT PARAMETER DESC HERE]
        ---
        @endpoints(OpenApi::_protocols.rest:"/customers/{customerId}";)
        @OpenApi::_aspects.GetMapping
        getCustomerUsingGET( sync in customerid : string,  sync out returnValue : CustomerManagementAPIData::v100.CustomerManagementAPI.CustomerDto);
        ---
        **Type** PUT Operation for path /customers/{customerId}
        **Summary** Update the profile of the customer with the given customer id
        **Description**
        @required requestBody [INSERT PARAMETER DESC HERE]
        @required returnValue [INSERT PARAMETER DESC HERE]
        ---
        @endpoints(OpenApi::_protocols.rest:"/customers/{customerId}";)
        @OpenApi::_aspects.PutMapping
        updateCustomerUsingPUT( sync in customerid : string, @OpenApi::_aspects.RequestBody sync in requestBody : CustomerManagementAPIData::v100.CustomerManagementAPI.CustomerProfileDto,  sync out returnValue : CustomerManagementAPIData::v100.CustomerManagementAPI.CustomerDto);
    }
    interface interactionLogInformationHolder {
        ---
        **Type** GET Operation for path /interaction-logs/{customerId}
        **Summary** Get the interaction log for a customer with a given customer id.
        **Description**
        @required returnValue [INSERT PARAMETER DESC HERE]
        ---
        @endpoints(OpenApi::_protocols.rest:"/interaction-logs/{customerId}";)
        @OpenApi::_aspects.GetMapping
        getInteractionLogUsingGET( sync in customerid : string,  sync out returnValue : CustomerManagementAPIData::v100.CustomerManagementAPI.InteractionLogAggregateRoot);
        ---
        **Type** PATCH Operation for path /interaction-logs/{customerId}
        **Summary** Acknowledge all of a given customer's interactions up to the given interaction id.
        **Description**
        @required requestBody [INSERT PARAMETER DESC HERE]
        @required returnValue [INSERT PARAMETER DESC HERE]
        ---
        @endpoints(OpenApi::_protocols.rest:"/interaction-logs/{customerId}";)
        @OpenApi::_aspects.PatchMapping
        acknowledgeInteractionsUsingPATCH( sync in customerid : string, @OpenApi::_aspects.RequestBody sync in requestBody : CustomerManagementAPIData::v100.CustomerManagementAPI.InteractionAcknowledgementDto,  sync out returnValue : CustomerManagementAPIData::v100.CustomerManagementAPI.InteractionLogAggregateRoot);
    }
    interface notificationInformationHolder {
        ---
        **Type** GET Operation for path /notifications
        **Summary** Get a list of all unacknowledged notifications.
        **Description**
        @required returnValue [INSERT PARAMETER DESC HERE]
        ---
        @endpoints(OpenApi::_protocols.rest:"/notifications";)
        @OpenApi::_aspects.GetMapping
        getNotificationsUsingGET( sync out returnValue : CustomerManagementAPIData::v100.CustomerManagementAPI.NotificationDtoList);
    }
}